-server should terminate running games with no connection instead of blindly timing out
-gravity-point object seems to be pretty cool, could work with that
-ship to be cool shape?
-high scores DB for multiplayer games
-high score personal cookies for single player game
-harden MP from hacking.
 -socket.emit('createSession') w/o correct object and the server shuts down
-powerups (cone shoot, powerful shots, faster engine, better inertial dampeners
-points - steady increase w/ timer, maybe not points but cash - use cash to buy powerups?
-enemy mothership
-sound FX
-cool things encountered - when all stars move in one direction but with a nudge, the effect is sweet.  When explodingtext is called but the screen is not cleared, it's sweet.
 -Maybe use stars moving in one direction with nudge as paralax?
- ctx.fillRect() and ctx.createRadialGradient do some cool stuff when creating many on top of eachtoerh in the same place.  Like a beacon.  
-add dev_options to readout - will have asteroids array, noExplodeAsteroids array, bullets, what else?
-Would the game become deterministic if there was only one master timer, say on the server?

### Better Multiplayer ###

-Asteroids should not be jumpy
	 -Maybe when asteroid info / 'full state' is passed down it shouldn't update the asteroid entirely.  Only specific aspects.  I.E. The orientation need not be changed.  Which means either asteroids should not be replaced, or aspects of the old asteroids should be pulled out and put into the new ones.  

	 Strategies for moving forward:
	 1) Change so that asteroids are not replaced, and destroy signals are sent down from server.
	 2) Adapt current system to pull in the state that should be saved.

	 1 is good for speed, but not as robust.  Does it need to be?  2 is going to slow things down, but possibly imperceptibly.  Also more robust if a signal does not make it to the client, but will that ever happen?  Maybe the server should send down the full state and the client should just do what it will with it.

-Timers
	-Could be one universal timer, on server, and it either pushes everything or requests tick on client side.  Then flying your own ship would not be as smooth.
	-Could build an accurate timer. (Hard - need ~30 ms precision)

-Websocket Libraries
	-ws familiar with it (now) but it has nothing going for it
	-Socket.io auto downgrade from websocket to xhr to flash, etc.  Built in rooms.

* WebRTC
	* Totally could make this happen.
	* Heroku app is STUN server (facilitate connections)
	* Same app contains persistant memory (which isn't even a thing yet :D) maybe with MongoDB?  Or redis, or even MySQL?  Maybe that last one would be good b/c free and I don't get it yet.
	* One master with master clock, time can be treated as discrete and ticks on slaves will be signaled by master -- one client fails, whole game goes down.  Not an option.
	* All are equal, totally distributed, decentralized network.  Each client emits every event to every client.  How to achieve deterministic state?  Who has final say?  
			* Maybe the client with the fastest tick speeds over the course of a period of time like 0.5 seconds or 2 seconds or something?
				* Each client will wait the 0.5 seconds for requests to come in.  Each request will have a { tickNumber: 234, timeStamp: 3423428 } and the latest timestamp after that period of time passes will be chosen.  PROBLEMS: how will that 0.5 seconds be determined?  Oh that's an imprecise timer, that can be done accurately.  Ok, now that that one is taken, what info will be in it?  
		* Clients can fail and the game would survive.  Must be this way.
		* Games each have their own timer, so time is continuous.
		* Each client is in charge of their own ship still!